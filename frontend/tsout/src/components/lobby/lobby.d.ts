import { DwgElement } from '../dwg_element';
import { ChatMessage, DwgChatbox } from '../chatbox/chatbox';
import { DwgLobbyUsers } from './lobby_users/lobby_users';
import { DwgLobbyRooms } from './lobby_rooms/lobby_rooms';
import { DwgLobbyRoom } from './lobby_room/lobby_room';
import { ConnectionMetadata, LobbyRoom } from './data_models';
import './lobby.scss';
import '../chatbox/chatbox';
import './lobby_users/lobby_users';
import './lobby_rooms/lobby_rooms';
import './lobby_room/lobby_room';
import '../dialog_box/message_dialog/message_dialog';
import '../dialog_box/confirm_dialog/confirm_dialog';
export declare class DwgLobby extends DwgElement {
    private name_container;
    private ping_container;
    private refresh_lobby_button;
    private create_room_button;
    private lobby_rooms;
    private chatbox;
    private lobby_users;
    private lobby_room_wrapper;
    private lobby_room;
    private lobby_users_button;
    private lobby_users_backdrop;
    private socket;
    private connection_metadata;
    private entered_game;
    private exited_game;
    constructor();
    getLobbyRoom(): DwgLobbyRoom;
    getLobbyRooms(): DwgLobbyRooms;
    getLobbyUsers(): DwgLobbyUsers;
    protected parsedCallback(): void;
    getChatbox(): DwgChatbox;
    getCreateRoomButton(): HTMLButtonElement;
    getSocket(): WebSocket;
    getConnectionMetadata(): ConnectionMetadata;
    connect(nickname: string, new_socket: WebSocket): void;
    setSocket(new_socket: WebSocket): void;
    userLeftRoom(room_id: number, client_id: number, left_text: string): void;
    socketActive(): boolean;
    setNickname(nickname: string): void;
    setPing(ping: number): void;
    refreshLobbyRooms(check_url?: boolean, show_load_message?: boolean): Promise<void>;
    enterRoom(room: LobbyRoom, is_host: boolean): void;
    leaveRoom(): void;
    sendChatMessage(chatbox: DwgChatbox, message_kind: string, message: ChatMessage, display_sender: string): void;
    canAutoLaunchRoom(): boolean;
    enterGame(): void;
    exitGame(): void;
    static DEFAULT_CONNECTION_TIMES: number;
    waitingOnConnectedTimes: number;
    pingServer(): void;
}
